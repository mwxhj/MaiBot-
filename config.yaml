# MaiBot 配置文件
# 所有敏感信息（如API密钥）应在生产环境中使用环境变量或安全存储

# 系统基本设置
system:
  name: "林静"
  version: "0.1.0"
  log_level: "DEBUG"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  timezone: "Asia/Shanghai"
  language: "zh-CN"
  data_dir: "data"
  plugins_dir: "plugins"
  templates_dir: "templates"
  assets_dir: "assets"

# 机器人核心设置
bot:
  # 基本配置
  name: "林静"
  version: "0.1.0"
  description: "基于多LLM的智能对话机器人"
  log_level: "DEBUG"
  
  # 事件总线配置
  event_bus:
    max_concurrent_events: 10  # 最大并发事件数
    error_handling: "log_and_continue"  # log_and_continue, strict
  
  # 会话设置
  session:
    timeout: 1800  # 会话超时时间（秒），默认30分钟
    message_context:
      include_personality: true  # 是否在消息上下文中包含人格信息
      include_history: true      # 是否在消息上下文中包含历史对话
      include_emotion: true      # 是否在消息上下文中包含情绪信息
      depth: 20                  # 对话上下文深度（轮次）
      auto_association: true     # 启用自动记忆关联
      max_cache_items: 1000      # 向量缓存最大条目
    
    default_system_prompt: "你是林静AI助手，一个友好、聪明且乐于助人的人工智能助手。你现在在QQ群聊中，请尽可能简洁地回答问题，避免过长回复。"
    max_response_length: 500  # 回复最大长度，避免在群里发送过长消息
  
  # 处理器执行顺序设置 - 确保与ProcessorName中定义的处理器匹配
  processor_pipeline: [
    "read_air",
    "thought_generator",
    "response_composer"
  ]

# LLM模型配置
llm:
  # 令牌计数器设置
  token_counter:
    default_model: "gpt-4o-mini"

  # 供应商列表
  providers:
    # OpenAI 供应商
    - id: "openai_main"
      type: "openai_compatible"
      name: "OpenAI Main"
      enabled: true
      api_key: "${OPENAI_API_KEY}"
      timeout: 60
      models:
        - "gpt-4o-mini"
        - "gpt-4o"
        - "text-embedding-3-small"
        - "text-embedding-3-large"

    # 自定义供应商示例
    - id: "mingwang_provider"
      type: "openai_compatible"
      name: "MingWang LLM"
      enabled: true
      api_key: "${MINGWANG_API_KEY}"
      api_base: "${MINGWANG_BASE_URL}"
      timeout: 60
      models:
        - "deepseek-v3-0324"
        - "text-embedding-3-small"

  # 任务路由策略
  usage_strategy:
    # 任务到供应商和模型的路由映射
    task_routing:
      # chat 任务: 优先 OpenAI，失败则回退到 MingWang
      chat:
        - provider_id: "mingwang_provider"
          model: "deepseek-v3-0324"
      # embeddings 任务: 优先 MingWang，失败则回退到 OpenAI
      embeddings:
        - provider_id: "mingwang_provider"
          model: "text-embedding-3-small"
      # 其他任务暂时保持单个提供商
      summarization:
        - provider_id: "mingwang_provider"
          model: "deepseek-v3-0324"
      creative:
        - provider_id: "mingwang_provider"
          model: "deepseek-v3-0324"
      read_air:
        - provider_id: "mingwang_provider"
          model: "deepseek-v3-0324"
      thought_generation:
        - provider_id: "openai_main"
          model: "gpt-4o-mini"

# 存储设置
storage:
  # 数据库设置
  database:
    type: "sqlite"
    path: "data/linjing.db"
    # 连接配置
    connection:
      timeout: 30
      isolation_level: null  # 自动提交
      pragma:
        foreign_keys: "ON"  # 启用外键约束
    # 初始化设置
    create_tables_on_connect: true
    migrations_dir: "linjing/storage/migrations"
    
  # 向量数据库设置
  vector_db:
    type: "qdrant"  # 修正为实际使用的数据库类型
    path: "data/vector_store"
    collection_name: "memories"
    dimension: 1536  # OpenAI嵌入向量维度
    similarity: "Cosine"  # 首字母大写，符合Qdrant API要求

# ======================== 更新后的配置部分 ========================

# 记忆系统设置 (更新)
memory:
  # 记忆存储设置 (Storage Settings)
  storage:
    type: "hybrid"  # 存储模式: "hybrid" (混合), "vector" (仅向量), "database" (仅数据库)
    max_conversation_history: 50  # 最大对话历史记录数 (用于短期记忆)
    memory_decay_rate: 0.95  # 记忆重要性随时间衰减的速率 (0-1, 1表示不衰减)
    importance_threshold: 0.5  # 形成长期记忆的重要性阈值 (0-1)
    max_memories_per_retrieval: 5  # 单次检索操作返回的最大记忆数量

  # 向量存储配置 (Vector Store Configuration)
  vector_store:
    type: "qdrant"  # 向量数据库类型: "qdrant", "chromadb", "faiss" 等
    path: "data/vector_store"  # 本地存储路径 (如果适用)
    collection_name: "memories"  # 向量集合/索引的名称
    dimension: 1536  # 向量维度 (需与使用的 Embedding 模型匹配, e.g., OpenAI text-embedding-ada-002 is 1536)
    similarity: "Cosine"  # 向量相似度计算方法: "Cosine", "Euclidean", "DotProduct"

  # 知识图谱配置 (Knowledge Graph Configuration)
  knowledge_graph:
    enabled: true  # 是否启用知识图谱功能
    max_relations: 1000  # 图谱中允许的最大关系数量
    relation_decay: 0.9  # 关系强度随时间衰减的速率 (0-1)
    min_relation_strength: 0.3  # 认为关系有效的最小强度阈值 (0-1)

  # 记忆检索配置 (Retrieval Configuration)
  retrieval:
    max_results: 5  # 最终返回给用户的最大检索结果数量
    similarity_threshold: 0.75  # 向量相似度阈值 (0-1, 仅返回高于此阈值的结果)
    # 记忆排序权重 (总和建议为 1.0)
    time_weight: 0.3  # 时间因素 (新近度) 的权重
    importance_weight: 0.5  # 记忆重要性评分的权重
    relevance_weight: 0.2  # 与查询的向量相似度 (相关性) 的权重

  # 嵌入管理器配置 (Embedding Manager Configuration)
  embedding:
    batch_size: 10  # 批量处理文本进行 Embedding 的数量
    max_retries: 3  # 调用 Embedding API 失败时的最大重试次数
    timeout: 30  # 调用 Embedding API 的超时时间 (秒)

  # 关系数据库配置 (Relational Database Configuration)
  database:
    type: "sqlite"  # 数据库类型: "sqlite", "postgresql" 等
    path: "data/memories.db"  # SQLite 数据库文件路径
    max_connections: 10  # 数据库连接池的最大连接数 (如果适用)

# 情感系统设置 (更新)
emotion:
  enabled: true  # 是否启用情感系统
  update_interval: 60  # 情感状态自动更新/衰减的间隔时间 (秒)
  max_history: 100  # 存储的情感状态历史记录的最大数量

  # 情绪维度配置 (Emotion Dimensions Configuration)
  # 定义机器人核心的情绪维度及其属性
  dimensions:
    happiness: # 快乐-悲伤
      base: 0.5       # 情绪维度的基础值/中性值 (0-1)
      range: 0.3      # 情绪围绕基础值的正常波动范围 (+/-)
      decay_rate: 0.05 # 该维度情绪向基础值衰减的速率 (每 update_interval)
    excitement: # 兴奋-平静
      base: 0.4
      range: 0.4
      decay_rate: 0.1
    confidence: # 自信-怯懦
      base: 0.6
      range: 0.2
      decay_rate: 0.03
    friendliness: # 友好-疏远
      base: 0.7
      range: 0.2
      decay_rate: 0.04
    curiosity: # 好奇-冷漠
      base: 0.8
      range: 0.1
      decay_rate: 0.02
    # 可以根据需要添加更多维度, 如 patience (耐心), trust (信任) 等

  # 情绪影响因子 (Influence Factors Configuration)
  influence_factors:
    message_length: 0.1   # 消息长度对情绪的影响权重
    message_tone: 0.3     # 消息语气 (通过情感分析得到) 的影响权重
    user_relationship: 0.4 # 与用户的关系强度 (如果有) 的影响权重
    time_of_day: 0.2      # 一天中的时间段对情绪的影响权重

  # 情绪规则配置 (Emotion Rules Configuration)
  rules:
    # 示例: 基于关键词的情绪变化
    positive_keywords: ["开心", "高兴", "喜欢", "爱", "棒"] # 触发积极情绪的关键词列表
    negative_keywords: ["生气", "讨厌", "恨", "糟糕"] # 触发消极情绪的关键词列表
    intensity_multiplier: 1.5 # 规则触发时情绪变化的强度乘数
    # 可以在代码中定义更复杂的规则 (基于正则表达式、阈值、组合条件等)
    # 建议将规则的具体参数 (如阈值、变化量) 放入配置

  # 情绪表达配置 (Emotion Expression Configuration)
  expression:
    min_intensity: 0.3  # 情绪强度低于此阈值时，不明显表露情绪 (0-1)
    max_emojis: 3       # 单条回复中最多使用的、与情绪相关的 emoji 数量
    # 情绪到表达风格的映射 (示例)
    style_mapping:
      # 当某种情绪占主导时，倾向于使用的回复风格权重
      friendly: 0.7    # 友好风格的倾向权重
      formal: 0.3      # 正式风格的倾向权重
      humorous: 0.5    # 幽默风格的倾向权重

# 人格系统设置 (更新)
personality:
  # 基础人格特质 (基于大五人格模型 - Big Five)
  big_five:
    openness: # 开放性: 想象力、创造力、好奇心 vs 保守、务实
      base: 0.7       # 特质的基础值 (0-1)
      variability: 0.1 # 特质围绕基础值的正常波动范围 (+/-)
    conscientiousness: # 尽责性: 条理性、可靠性、自律 vs 随性、灵活
      base: 0.6
      variability: 0.15
    extraversion: # 外向性: 社交性、活力、热情 vs 内向、安静
      base: 0.5
      variability: 0.2
    agreeableness: # 宜人性: 合作、同情、信任 vs 竞争、直接
      base: 0.8
      variability: 0.1
    neuroticism: # 神经质(情绪稳定性): 焦虑、敏感 vs 平静、稳定
      base: 0.3
      variability: 0.05

  # 认知风格 (Cognitive Style)
  # 定义机器人的思维和解决问题的方式倾向
  cognitive_style:
    analytical: 0.6   # 分析性思维倾向 (逻辑、数据驱动)
    intuitive: 0.4    # 直觉性思维倾向 (整体感知、模式识别)
    creative: 0.7     # 创造性倾向 (新颖想法、非传统方法)
    practical: 0.5    # 实用性倾向 (关注结果、可行性)

  # 价值观体系 (Values System)
  # 定义机器人认为重要的核心原则或信念
  values:
    knowledge: 0.9    # 对知识和学习的重视程度
    harmony: 0.8      # 对和谐与和平的重视程度
    achievement: 0.6  # 对成就和成功的重视程度
    helpfulness: 0.85 # 对帮助他人的重视程度
    honesty: 0.75     # 对诚实和正直的重视程度
    # 可以添加更多价值观, 如 "creativity", "justice" 等

  # 行为偏好 (Behavioral Preferences)
  # 定义机器人在互动中的具体行为倾向
  preferences:
    # 回复风格的默认权重 (会被当前情绪和情境影响)
    response_style:
      friendly: 0.7   # 友好风格的默认权重
      formal: 0.2     # 正式风格的默认权重
      humorous: 0.5   # 幽默风格的默认权重
      concise: 0.6    # 简洁风格的默认权重
    emoji_usage: 0.5  # 使用 emoji 的频率或倾向 (0-1)
    detail_level: 0.6 # 回复的详细程度 (0-1, 0=非常简洁, 1=非常详细)
    initiative: 0.4   # 主动发起对话或提出建议的倾向 (0-1)

  # 兴趣领域 (Interest Areas)
  # 定义机器人对不同话题的兴趣程度 (加权)
  interests:
    technology: 0.8
    art: 0.6
    science: 0.7
    philosophy: 0.5
    literature: 0.6
    # 可以根据需要添加更多兴趣领域

# 处理器配置
processors:
  read_air:
    group_max_history: 30  # 群组整体历史
    group_user_max_history: 10 # 群组内用户独立历史
  # 处理器配置
  read_air:
    enabled: true
    description: "理解用户输入和环境信息的处理器"
    confidence_threshold: 0.6
    max_history: 10
    analyze_intent: true
    extract_entities: true
  
  thought_generator:
    enabled: true
    description: "生成内部思考过程的处理器"
    max_tokens: 1000
    temperature: 0.7
    top_p: 0.9
    show_reasoning: true
  
  response_composer:
    enabled: true
    description: "生成最终回复的处理器"
    max_tokens: 1000
    temperature: 0.7
    max_length: 500
    format_response: true
    filter_sensitive: true

# 适配器设置
adapters:
  # OneBot适配器设置 (用于QQ机器人)
  onebot:
    enabled: true
    is_reverse: true  # 使用反向WebSocket模式
    reverse_ws_host: "${ONEBOT_HOST:-0.0.0.0}"  # 强制使用IPv4
    reverse_ws_port: ${ONEBOT_PORT:-6700}  # OneBot标准端口
    family: AF_INET  # 指定IPv4协议
    access_token: "${ONEBOT_ACCESS_TOKEN}"  # OneBot访问令牌
    heartbeat_interval: 5000  # 心跳间隔，单位毫秒
    rate_limit: 5.0   # 每秒API请求限制
    burst_limit: 10    # 突发请求限制
    
    # QQ机器人功能设置 (这些设置可能需要在具体实现中添加)
    qq:
      admin_qq: [123456, 789012]  # 管理员QQ号列表
      always_respond_at: true     # 是否总是响应@
      respond_to_prefix: true     # 是否响应前缀命令
      command_prefix: "/"         # 命令前缀
      keyword_trigger: true       # 是否启用关键词触发
      trigger_keywords: ["林静", "机器人"]  # 触发关键词

# 插件系统 - 目前代码中未实现，将此部分设为禁用状态
plugins:
  enabled: false
  auto_load: false
  plugins_dir: "plugins"
